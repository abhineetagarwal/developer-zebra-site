[{"title":"About MDM Toolkit","keywords":"## overview mdm toolkit complete turn-key solution skilled android application developers independently develop applications manage zebra emc devices management performed provisioning xml files submitted mx framework apis reside clients signed order utilize functionality document describes components information tool generate correct code examples interfacing client **jump in** follow [quick start guide]/mdmtk/2-0/tutorial/ walks process tools ### folder structure * **documentation** instructions handling csp reference **samples** sample project documentation started system generation submission responses included feature type supplies important usage notes device compatibility part imported directly ide run supported samples found `samples` minimum requirements version supports versions operating systems kitkat jellybean >**note** features [feature matrix]/mdmtk/2-0/mx/compatibility pages ","summary":"\nOverview\nThe MDM Toolkit provides a complete turn-key solution that allows skilled Android application developers to independently develop applications to manage Zebra EMC devices.","url":"/mdmtk/2-0/guide/about"},{"title":"MX Management System Interface","keywords":"order communicate mxms setup binding service reference established * send xml change device behavior configuration query current framework settings process results back ## requirements zebra android mx note instructions install update stagenow started documentation ide code ### create project empty activity permissions added application's manifest file access packages application package named `comsymbolmxmf` `commotorolasolutionsemdkmxframework` holding aidl interface definition language files simplemdmtoolkitsample supplied mdm toolkit imxframeworkserviceaidl copied located simplemdmtoolkitsample's respective made step created copy paste classes project's `comsymbolsimplemdmtoolkitsample` mxnamespacejava mxnamespacemotorolasolutionsjava mxnamespacesymboljava symbolbrandjava xmlparserjava >**note** names edited match oncreate method call init symbolbrand class check installed detected bound allowing interaction occur java // variable hold main static private m_activity @override protected void oncreatebundle savedinstancestate { superoncreatesavedinstancestate setcontentviewrlayoutactivity_main save accessed threads = start early shown submitted complete symbolbrandmxmsinitthismmxframeworkserviceconnection } serviceconnection onserviceconnected callback notify successfully onservicedisconnected unbound mandatory track mmxframeworkserviceconnection completed public onserviceconnectedcomponentname classnameibinder unbinding occurred onservicedisconnectedcomponentname classname helper called end term unbind exit point pass notification symbolbrandmxmsonserviceconnectedclassnameservice symbolbrandmxmstermm_activitymmxframeworkserviceconnection m_activityfinish symbolbrandmxmsonservicedisconnectedclassname ","summary":"\nIn order to communicate with the MXMS, you must setup a binding to the service. Once this reference is established you can then:\n\nSend XML to change device behavior or configuration\nQuery for current device and framework settings\nProcess results sent back from the MXMS\n\nRequirements \n\nZebra Android Device with MX\n\n\tNote: For instructions to install or update MX on your Zebra Android Device, please see the a href=\"http://techdocs.zebra.com/stagenow/2-3/gettingstarted/\" target=\"_blank\"StageNow 2.3 - Getting Started Documentation/a\n\nAndroid IDE\n\n Setup Code ###\nCreate a new Android project with an empty activity.","url":"/mdmtk/2-0/guide/interface"},{"title":"Persistence","keywords":"##overview context mdm toolkit persistence defined ability persist enterprise reset os update results zebra android devices factory exception /enterprise partition preserved destroyed purpose return device enterprise-defined default state generally determined contents agent control directly controlling mdm-deployed content stored folder survive request xml documents persistent [persistmgr feature type]//mx/persistmgr key aspects considered regard manageability management operations performed covered major sections page ###persistence general rule customers expect specific include managed incumbent vendor ensure capable meeting expectation customer stagenow stage install bring [staging mdm]/staging established sort sideloading process require significant additional effort achieve good reason strongly recommended order work expected properly question unique file names provide specifics related apk files configuration appropriately ####staging requirements staging met suitable version mxms present types perform tool kit designed target versions higher requirement accomplished location system store /enterprise/usr cases advisable mdm-specific sub-folder /enterprise/usr/mymdm permissions set world readable writable accessible owner ids change result reinstallation filemgr setting type deploy automatically correctly created select communicate information installed appmgr paths locations apks launched intent send intents required launch exact details implementation define connectivity contact server wi-fi gprsmgr conjunction supporting certmgr establish settings depend wishes supports vary widely give advice made persistmgr make entire profile ####sample steps meets shown &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp wlan network &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp ssid mynetwork passphrase mysecret download path /enterprise/usr/mymdm/mymdmcfg /enterprise/usr/mymdm/mymdmapk action start activity androidintentactionmain package commycompanymymdm class commycompanymymdm/mainactivity stagenowpersistmymdm error false sample theory meet hypothetical named mymdm * step establishes downloaded installs silently launches main document arrange resubmitted subsequent resets >**note** presupposes case thing depending situation production sophisticated ####operational completed running starts read configure based reach discovered show inventory displayed console resubmit persisted lead re-establish originally attempt re-download exists fail failure stop execution re-install re-launches re-persist errors occur remain ####mdm updates time updated [updating agent]/updating directing [appmgr type]//mx/appmgr care noted resubmitting physically replacing existing re-installed told maintain easiest leverage knowledge ####connectivity [wi-fi type]//mx/wifi [gprsmgr type]//mx/gprsmgr [certmgr type]//mx/certmgr and/or modify newly configured previously depends contacting sever topic part section worth mentioning due potential overlap important role plays changed ideally convexity understand single assigned persists conflict submitted win arbitrarily guidance recommending leaves plenty options choose lower applied intentionally number ensuring undo augment long recommendations provided assumes guidelines previous successfully achieved address ####approaches ensures occurs discard performing typically abandon user temporarily restore normal operation returning detect post-enterprise report detecting longer re-apply sense offer simply re-performing completely satisfied offers server-based re-perform means reasons considers approach undesirable unacceptable lacking circumstances initiated connection disruption wireless range unable usable intended critical lack loss productivity locally situations actively prefer unusable takes compare current desired begin initiating round trips rapidly leads identify high level approaches re-performs resending earlier downsides dependence lag discussed upside place fewer demands storage limited resource size 128mb large applications adequate space copies application criticality largest smaller saves commands received model implementing agents sends receives interprets determine functions extracts relevant command function selects pre-built templates substitutes assembles submits back happened creates describe re-process starting processed benefit requested implemented submitting combinations things custom code re-submits mxmf reduced spend re-processing creating proceed immediately submit saved ready downside implements solely executed saving choice execute processing additionally places local practical numerous requests save re-submit persistently simplify identity shares similarly ####persistence caveats chosen apply addressed robust complete solution administrator words permanent temporary troubleshooting measure preferable fact issued non-persistent clean mechanism express intention decision involve making polar extremes determination per-management basis mdms providing comprehensive adapt amount mind multiple entities allocated consumed processes mb tens fairly small occupy empowered decide utilize wait understood fixed internal primary support removable card variations exploited hard alternate supported wisely note reference hybrid solutions partitions deployed recommend administrators method addition written zebra's mobility development emdk finally includes similar inherently pre-eminent guarantee precedence ways seek cope consistent naming scheme differentiate remove unknown suspect [accessmgr type]//mx/accessmgr allowed exclusive semi-exclusive access ","summary":"\nOverview\n\nIn the context of the MDM Toolkit, Persistence is defined as the ability of to persist across an Enterprise Reset or an OS Update that results in an Enterprise Reset.","url":"/mdmtk/2-0/guide/persistence"},{"title":"Staging a Device","keywords":"##overview staging device refers process taking box setting managed mdm mxms required installed order states determine action meet requirement * jellybean devices version toolkit targets upgraded older latest upgrades ways updated options stagenow sideloading stage tool create barcodes scanned client method recommened option require manual steps performed information install update persist managability settings [mdm persistence page]/persistence successfully staged show console display screen connection successful connected agent send status server periodic basis ","summary":"\nOverview\n\nStaging a device refers to the process of taking a device out of the box and setting it up to be managed by MDM.\n\nMXMS is required to be installed on the device in order for it to be managed by the MDM.","url":"/mdmtk/2-0/guide/staging"},{"title":"Updating the MDM Agent","keywords":"##overview mdm agent updated versions released [appmgr feature type]//mx/appmgr upgrade appmgr action uninstall install actions uninstalling data wiped uninstalled existing installed newer version * package signed developer app higher number steps update download apk files device save persistent storage location enterprise partition recommended saved previous agent's overwrite type >**note** running shut installs affect processes triggered submitting xml mxms process result document returned received possibly causing errors detected acheive persistence manageability [persistence page]/persistence ","summary":"\nOverview\n\nThe MDM Agent may need to be updated when new versions are released. The AppMgr Feature Type can be used to upgrade this. \n\nThe AppMgr Feature that should be used for this would be its Upgrade action, instead of using its Uninstall and Install actions.","url":"/mdmtk/2-0/guide/updating"},{"title":"MX Management System Interface","keywords":"order communicate mxms setup binding service reference established * send xml change device behavior configuration query current framework settings process results back ## requirements zebra android mx ide code ### create project empty activity permissions added application's manifest file access packages application package named `comsymbolmxmf` `commotorolasolutionsemdkmxframework` holding aidl interface definition language files >**note** studio created folder automatically generate simplemdmtoolkitsample supplied mdm toolkit imxframeworkserviceaidl copied located simplemdmtoolkitsample's respective made step copy paste classes project's `comsymbolsimplemdmtoolkitsample` mxnamespacejava mxnamespacemotorolasolutionsjava mxnamespacesymboljava symbolbrandjava xmlparserjava names edited match oncreate method call init symbolbrand class check installed detected bound allowing interaction occur java // variable hold main static private m_activity @override protected void oncreatebundle savedinstancestate { superoncreatesavedinstancestate setcontentviewrlayoutactivity_main save accessed threads = start note early shown submitted complete symbolbrandmxmsinitthismmxframeworkserviceconnection } serviceconnection onserviceconnected callback notify successfully onservicedisconnected unbound mandatory track mmxframeworkserviceconnection completed public onserviceconnectedcomponentname classnameibinder unbinding occurred onservicedisconnectedcomponentname classname helper called end term unbind exit point pass notification symbolbrandmxmsonserviceconnectedclassnameservice symbolbrandmxmstermm_activitymmxframeworkserviceconnection m_activityfinish symbolbrandmxmsonservicedisconnectedclassname ","summary":"\nIn order to communicate with the MXMS, you must setup a binding to the service. Once this reference is established you can then:\n\nSend XML to change device behavior or configuration\nQuery for current device and framework settings\nProcess results sent back from the MXMS\n\nRequirements \n\nZebra Android Device with MX\nAndroid IDE\n\n Setup Code ###\nCreate a new Android project with an empty activity.","url":"/mdmtk/2-0/guide/xml/interface"},{"title":"XML Responses","keywords":"submitting request xml document knowing happened require minimal parsing result required simplified taking advantage aspects mxms * types behaviors set configuration perform action query format documents presence tlc errors absence equivalence quickly separate successes failures operation performed requested parm extraction compare resulting values determine deviation issued extract key primary purpose describe handle response success error responses ## simple method simplifying relevant information simply process searching extracting commonly applied non-pivotal parms pivotal typically canned part template create replicated important aspect make easier named ### equivalent represent data identical text differ white space order concept reflexive nature total means demonstrate returned successfully setting device's clock submitted tlcs find examined executed examine sgc parm-errors characteristic-error element appears failure processing characteristic #### top-level characteristic-errors outermost level completely rejected csp ##### **framework error** passes directly return found malformed general framework **csp considered context major processed ####sub-group sub-group tlcs/sgcs behavior portion enclosing contained >note [xmlmgr feature type]/guide/csp/xml enables control consult reference guide characteristic-query-error occurred characteristic-query occur queried support requires index supplied selected valid parm-error unsuccessful failed description explaining reason achieved parm-query-error parm-query ","summary":"\nWhen submitting a Request XML document, knowing what happened will require at least some minimal parsing of the Result XML document. The required parsing can be simplified by taking advantage of the following aspects of MXMS XML: \n\nAll three types of behaviors (Set Configuration, Perform Action, and Query Configuration) have the same format for their Result XML documents\nThe presence of TLC errors and the (absence of) XML equivalence can be used to quickly separate successes from failures\nIf an operation was performed, but not exactly as requested, Parm Value Extraction can be used to compare requested and resulting values to determine any deviation\nWhen an XML query is issued, Parm Value Extraction can be used to extract key values that were the primary purpose of the XML query \n\nThis document will describe how to handle response from MXMS:\n\nSuccess Response\nError Responses\n\nParm Value Extraction\n\nA simple and quite useful method for simplifying the extraction of relevant information from an XML Result document is Parm Value Extraction.","url":"/mdmtk/2-0/guide/xml/response"},{"title":"XML Submission","keywords":"## overview document describe send xml mxms setting parameter values csps * sending group submission structure based standard format csp offers options parameters sub-characteristics follow ### general rules characteristics wrapped `wap-provisioningdoc` node characteristic version attribute multiple package processed synchronously order generating toolkit provide means generate required exchange data generated utilizing **export profile mdm** feature stagenow full instructions setup usage found submitting application's activity's onserviceconnected method add code `term` call submit adds utilizemxms show edit repeatedly locations location possibly called java // definition mandatory track binding private serviceconnection mmxframeworkserviceconnection = { callback notify completed public void onserviceconnectedcomponentname classnameibinder service pass notification helper class bound symbolbrandmxmsonserviceconnectedclassnameservice purposes test application time real world situation things identified term symbolbrandmxmstermm_activitymmxframeworkserviceconnection exit m_activityfinish } unbinding occurred onservicedisconnectedcomponentname classname unbound symbolbrandmxmsonservicedisconnectedclassname demonstrate assets folder change parm request result returned parms methods mentioned create performs actions isready symbolbrand check successfully ready accept returns true clockinxml retrieved file replace arraylist made parmvalue objects object xmlparser instantiated top level type clock edited original xmlparser's replaceparms parm's modified class's submitxml device return formatxml split lines readability isequivalent equivalent submitted device's set documents error and/or shows fetchparm retrieve fetched function note complete previous passed depending hurts symbolbrandmxmsisready logdm_activitygetapplicationinfonamemxmsisready string xmlname extract snippet inxml xmlparsergetassetxmlm_activityxmlname obtained null logim_activitygetapplicationinfonameinxml +inxml xmlnamestartswithclock input replacevalues replacevaluesaddnew parmvalueclocktime111111 replacexml xmlparserreplaceparmsinxmlreplacevalues logim_activitygetapplicationinfonamereplacexml +replacexml processing fail indicating outxml symbolbrandmxmssubmitxmlinxml back logim_activitygetapplicationinfonameoutxml +outxml friendlier display fmtoutxml xmlparserformatxmloutxml formatted invalid results formatting logim_activitygetapplicationinfonamefmtoutxml +fmtoutxml determine xmlparserisequivalentinxmloutxml logim_activitygetapplicationinfonamesubmitted xmlnamestartswithclockin fetch output xmlparserfetchparmoutxmlnew parmselectorclocktime non-null logim_activitygetapplicationinfonameset \\+time+\\ fmtinxml xmlparserformatxmlinxml logem_activitygetapplicationinfonameinxml +fmtinxml logem_activitygetapplicationinfonamefmtoutxml logem_activitygetapplicationinfonamesubmitted top-level errors int xmlparsercounttlcerrorsoutxml > logem_activitygetapplicationinfonameresult +errors+ logdm_activitygetapplicationinfonameno ","summary":"\nOverview\nThis document will describe how to send XML to MXMS for setting parameter values for CSPs:\n\nSending XML\nGroup Submission\n\nThe structure of the XML is based on a standard format that is being used by the MXMS.","url":"/mdmtk/2-0/guide/xml/submit"},{"title":"MXMS XML Overview","keywords":"## xml schema mxms utilizes conforms prov dtd specifically microsoft-defined dialect defined msprov oma cp open mobile alliance client provisioning standard means consumed familiar mdm vendors and/or easily leveraged existing mdms based leverage elements ### characteristics characteristic element appears document dsd define hierarchical organization parms top-level tlcs outermost level tlc **exactly one** mapping dsds/csps type matches csp request set configuration perform action behaviors result information success failure requested sub-group sgcs tlcs/sgcs number including sgc behavior performed enclosing parm hold single data item unique long multiple desired selector parameter part processing successful typically determined supported close substituting closest reasonable case returned documents created submitted requesting application consists breaks component top delivers order primary types supports modify subsystem managed csps support discrete actions opposed involve changing rebooting device processes returns error results aggregates errors communicate attempt * successfully format rejected characteristic-error location accepted performing identical critical return parm-error non-critical suggestion dsds conditional purpose provide required present viable data-driven ui create cases use-cases sub-use-cases modes options functions effectively describe nature presence optional depending selected entered prior reliably generate reflect utilize presentif attribute includes boolean expression evaluated determine presented displayed generated enables flexibility permitting definition complex relationships pivotal respect simply determines included enforce attributes automatically compliant consumable generating programmatically importance properly account lead generation conform existence accomplish logical achieved taking path making selections enterprise factory resets stored intentionally lost reset subsystems manage store manner persistent make default state discard applied persistmgr appending entire special secure survive resubmit saved restoring effects initially made identify enumerate remove reapplied found reference section ","summary":"\nXML Schema\n\nMXMS utilizes XML that conforms to the PROV DTD and more specifically to the Microsoft-defined dialect, which is defined by the MSPROV DTD.","url":"/mdmtk/2-0/guide/xml/xml_overview"},{"title":"XML Parser","keywords":"## overview xmlparser class java assisting mxms xml android simplemdmtoolkitsample simplemdmtoolkitquery projects included mdm toolkit found samples folder developed assist starting development offer suggestion application process teams determine handle main features section describes common agent processing request result documents information individual methods ### validate set responses validating `isequivalent` function successful document equivalent white space pass string submitted response return `true` `false` returns error parms characteristics //check errors boolean isxmlgood = xmlparserisequivalentxml resxml counting helps count number returned `countcharcerrors` `counttlcerrors` functions characteristic-errors type top-level *or* sub-group //count int charerrors xmlparsercountcharcerrorsresxml tlcerrors xmlparsercounttlcerrorsresxml modifying modify replace values template program user input `replaceparms` characteristic containts replaced names method output updated parm //setup parmvalue parmvaluechartype parmname array list arraylist parmvalues //add parmvaluesaddparmvalue //modify newxml xmlparserreplaceparmsxml reading read `fetchparms` `fetchparmrepeats` confirm query selectors selector parmselector parmselectorchartype //get xmlparserfetchparmsxml creating create characteristic-query parm-query `getcharquery` `getparmquery` simple queried charquery xmlparsergetcharquerypersistmgr parmquery xmlparsergetparmquerypersistmgr version ###static public countcharcerrorsstring helper added level meaning **parameters** *xml-* **returns** integer indicating **example xml** invocation** charerrorcount xmlparsercountcharcerrorsxml output** counttlcerrorsstring tlcerrorcount xmlparsercounttlcerrorsxml fetchparmstring xmlparmselector extract single *selector-* object tlc needed inside multiple xmlparserfetchparmxmlnew parmselectortlcexampleparmexample parmvalueexample arraylist&ltstring&gt fetchparmrepeatsstring parmvaluelist xmlparserfetchparmrepeatsxml [parmvalueexample1 parmvalueexample2] ###public static formatcompxmlstring reformat comparable format equivalence checking extra whitespace removed checked reformatted formattedxml xmlparserformatcompxmlxml formatxmlstring displayable lines readability xmlparserformatxmlxml getassetxmlactivity activitystring assetname file assets contents *activity-* activity calling *assetname-* asset project include extension null xmlparsergetassetxmlthis inputxml getcharquerystring chartype construct queries feature *chartype-* made getparmquerystring chartypestring directly *parmname-* isequivalentstring inxmlstring outxml strings means ignoring detect successfully applied comparing contained *inxml-* compared *outxml-* true false 1** 2** xmlparserisequivalentxmlxml2 readxmlinputstream stream inputstream variable convert *stream-* data xmlparserreadxmlstream replaceparmsstring xmlarraylist&ltparmvalue&gt >**note** occurrence instances subsequent affected *values-* objects replacevalues replacevaluesaddnew parmvaluetlcexample parmexample newvalue replacexml xmlparserreplaceparmsinxmlreplacevalues ","summary":"\nOverview\n\nThe XmlParser class is a Java class for assisting with MXMS XML on Android. This class is available in the SimpleMdmToolkitSample and SimpleMdmToolkitQuery projects that are included in the MDM Toolkit.","url":"/mdmtk/2-0/guide/xml/xmlparser"},{"title":"Batch Manager","keywords":"document smartdocs capabilities easily content relevant zebra device working mx features based combination factors version retrieved instructions osx require order operate android specific minimum checking system settings application identifying information simply select bar section apply greyed clear hitting button clicking back buttons navigate sections batch setting execute profile number viewed sort subroutine call stagenow internally explicit reference staging administrator generate codes nfc tags implement execution deployment read server explicitly leverage functionality create reusable components profiles embedding referencing test demonstrate prove exported xml saved binary programming nfg tag embedded re-use perform entire point created visibility nonetheless exploit refer file usage present references executed proper result occur transferred band method implemented automatically construct advanced customized scenarios process type processed encoded choosing **device system** enter path located **embedded xml** workstation provide security password empty = decrypt shown access encoding set examined client private key modifed public future supported v20 determines encryption required ","summary":"This document contains \"SmartDocs\" capabilities. This will allow you to easily see only the content that is relevant to the Zebra device you are working with.","url":"/mdmtk/2-0/mx/batchmgr"},{"title":"Choosing an MX Version","keywords":"## overview mx management system mxms common interface zebra android device capabilities utilizing xml conforms standard oma-cp prov microsoft msprov schema developers administrators extensible efficient reliable scalable means configuring administrating devices exposes underlying csps provide give user access privileged unprivileged apis combination installed version operating determine ### evaluation steps targeting identify features needed compatibility verify target identifying set services include individual review version's reference documentation feature included * [profile features]/emdk-for-android/4-2/mx specific supported identified consult [device table]/emdk-for-android/4-2/mx/compatibility intend support [check device]/emdk-for-android/4-2/mx/version-on-device ensure running required ","summary":"\nOverview\nThe MX Management System (MXMS) provides a common interface to Zebra Android device capabilities utilizing XML that conforms to the standard OMA-CP PROV (Microsoft MSPROV) schema.","url":"/mdmtk/2-0/mx/choosing-a-version"},{"title":"IP Output Profile Feature Reference","keywords":"## overview order barcode msr data application create profile input feature output * [barcode]/emdk-for-android/4-2/guide/profiles/profilebarcode / [msr]/emdk-for-android/4-2/guide/profiles/profilemsr [keystroke]/emdk-for-android/4-2/guide/profiles/profilekeystroke[intent]/emdk-for-android/4-2/guide/profiles/profileintent[ip]/emdk-for-android/4-2/guide/profiles/profileip `barcode` manager responsible reading device's integrated bar code scanner supports types readers including laser imager internal camera detailed parameters behavior individual symbology `intent` `keystroke` `ip` define handled intent collects sends received android mechanism familiar register receive intents handling passed ability configure keystroke emulating keystrokes option control prefix suffix automatically added basic formatting ip datawedge send captured host computer network connection address port tcp udp transport protocols field emdk identify parameter set manage part programmatically [profilemanager]/emdk-for-android/4-2/api/profilemanager api multiple update [emdk profiles overview]/emdk-for-android/4-2/guide/profile-manager information enabled enables disables remote wedge enable disable default ipwedge protocol select options enter number configuration disabled modification add characters beginning end transfer foreground disabling prevents actual transmitted strings present hex hexadecimal format tab key append character processed ","summary":"\nOverview\nIn order to get Barcode or MSR data in your application, you must create a profile that has both an Input feature and an Output feature:\n\nBarcode / MSR (Input)\nKeystroke,Intent,IP (Output)\n\nThe Barcode feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera.","url":"/mdmtk/2-0/mx/data-capture/IP"},{"title":"Activity Selection Profile Feature Reference","keywords":"## overview creating profile **barcode** **msr** data capture configure activity selector automate process activating deactivating automated management complex applications field emdk identify feature parameter set manage part programmatically [profilemanager]/emdk-for-android/4-2/api/core/profilemanager api multiple types update [emdk profiles overview]/emdk-for-android/4-2/guide/profile-manager information ##activity selection [img]activity-selectionpng ###applications **applications** section configuration screen enter **application name** click **apply** button add application list **applications names** formal package definition comsymbolprofiledatacapturesample1 created project copied case names foresee mind convenience simplify entry restricted activities exist ###activities build active selecting **activity class complete prefixed **comsymbolprofiledatacapturesampe1**mainactivity belong simply check auto prefix box mix manually clicking apply enable selected wildcard** &#42 individually asterisk ","summary":"\nOverview\n\nWhen creating a profile for Barcode or MSR data capture you can configure an Activity Selector to automate the process of activating and deactivating the profile.","url":"/mdmtk/2-0/mx/data-capture/activity"},{"title":"Barcode Profile Feature Reference","keywords":"## overview order barcode data application create profile features selected * [keystroke]/emdk-for-android/4-2/guide/profiles/profilekeystroke[intent]/emdk-for-android/4-2/guide/profiles/profileintent[ip]/emdk-for-android/4-2/guide/profiles/profileip output `barcode` feature manager responsible reading device's integrated bar code scanner supports types readers including laser imager internal camera detailed parameters behavior individual symbology `intent` `keystroke` `ip` define handled intent collects sends received android mechanism familiar register receive intents handling passed ability configure keystroke emulating keystrokes option control prefix suffix automatically added basic formatting ip datawedge send captured host computer network connection address port tcp udp transport protocols field emdk identify parameter set manage part programmatically [profilemanager]/emdk-for-android/4-2/api/profilemanager api multiple update [emdk profiles overview]/emdk-for-android/4-2/guide/profile-manager information enabled enables disables default selection configures scanning device capture auto determines scan module scan/msr installed mc40 2d performed rear-facing decoders disabled performance disable unnecessary commonly shown asterisk supported australian postal aztec canadian chinese codabar* 39* 128* composite ab datamatrix* discrete dutch ean-8* ean-13* gs1 databar* databar expanded* limited han xin japanese korean interleaved matrix maxicode* mail mark micropdf microqr msi pdf417* qr code* signature tlc trioptic uk upc-a* upc-e0* upc-e1 us4state fics uspostnet usplanet webcode upca report check digit character symbol verify integrity preamble characters upc consisting country system options transmitting transmit sys char usa select match upce0 convert enable suppressed decoded upc-a format transmission conversion affected programming selections code128 length1 decode lengths length2 redundancy sets reader read accepting plain flag gs1-128 isbt-128 subtype isbt128 concatenation mode concatenating pairs isbt concat concatenate codes encountered perform single symbols decodes concatenates immediately present number times confirm additional table specification includes lists found concatenated security level offers levels increasing decreasing quality inverse relationship aggressiveness choose setting operate aggressive state providing sufficient decoding in-spec eliminates misdecodes fails eliminate occur advised selecting extreme measure mis-decoding severely spec significantly impairs needed improve reduced quiet zone ignore fnc4 code39 complies algorithm digital include modulo full ascii variant encode code32 italian pharmaceutical industry converting adding 2of5 uss uniform opcc optical product council itf-14 ean13 14-character ean-13 leading valid i2of5 ##gs1 ucc link 1d component transmitted detected linked components discriminate portion transmits postnet planet codabar clsi editing strip start stop insert space tenth requires notis length mandatory verified optional digits scheme algorithms verification mod-11-10 mod mod-10-10 code93 code11 selects ##matrix upce1 allowable variable range specific ean params configuration apply decoder upc/ean higher lower speed fastest diminish prone misdecoding poorly printed impair supplemental2 supplemental5 supplemental supplementals presented ignores supplements smart returns main block belong starts prefixes searches image aggressively failed returned 378-379 auto-discriminate starting 978-979 414-419-434-439 retry count auto-discriminating values inclusive note considered random weight bookland coupon successfully correct modes extend add zeros ean-8 make compatible formats isbn-10 isbn-13 converts work symbologies marginless barcodes beam timer maximum amount time remains ms increments stay indefinitely adaptive enable/disable width narrow normal wide power low optimized high mobile phone display defines finer ds457 ssi triggers presentation triggered linear accurate based flags short long thrice picklist directly cross-hair/reticle + pattern applications view session targeted centered center conjunction static dynamic reticle viewfinder modules unsupported issue error cross-hair aim type trigger continuous timeout suppress interval steps illumination depending ambient light conditions lcd enhances displays cellphones degradation observed aiming crosshair blink delay enter seconds minute minutes brightness user positive poor effort red screen helps id feedback identifies scanned standards defined ringtones fully tones longer truncated tone recommendation test operation deployment customer site volume ringer music media alarms notification audio sound good stored application’s private cache asset avoid access violation meant purpose shared public directories music/ ringtones/ “external storage” haptic vibrate bt disconnect exit bluetooth idle opened disconnected duration inactivity led runs true pairing utility method called engine controls engines refer reference documentation [intent]/emdk-for-android/4-2/guide/profiles/profileintent [keystroke]/emdk-for-android/4-2/guide/profiles/profilekeystroke [ip]/emdk-for-android/4-2/guide/profiles/profileip ","summary":"\nOverview\nIn order to get Barcode data in your application, you must create a profile with two profile features selected:\n\nBarcode\nKeystroke,Intent,IP (Output)\n\nThe Barcode feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera.","url":"/mdmtk/2-0/mx/data-capture/barcode"},{"title":"Intent Profile Feature Reference","keywords":"## overview order barcode msr data application create profile input feature output * [barcode]/emdk-for-android/4-2/guide/profiles/profilebarcode / [msr]/emdk-for-android/4-2/guide/profiles/profilemsr [keystroke]/emdk-for-android/4-2/guide/profiles/profilekeystroke[intent]/emdk-for-android/4-2/guide/profiles/profileintent[ip]/emdk-for-android/4-2/guide/profiles/profileip `barcode` manager responsible reading device's integrated bar code scanner supports types readers including laser imager internal camera detailed parameters behavior individual symbology `intent` `keystroke` `ip` define handled intent collects sends received android mechanism familiar register receive intents handling passed ability configure keystroke emulating keystrokes option control prefix suffix automatically added basic formatting ip datawedge send captured host computer network connection address port tcp udp transport protocols core components activities services broadcast receivers activated bundle information object describing desired action acted category component perform pertinent instructions locates respond launches instance needed passes advertise capabilities kinds filters system learn handle manifest &ltintent-filter&gt elements number capability xml configuration java comsymbolemdksamplerecvr androidintentcategorydefault emdk form implicit refer developer web site http://developer.android.com. field identify parameter set manage part programmatically [profilemanager]/emdk-for-android/4-2/api/profilemanager api multiple update [emdk profiles overview]/emdk-for-android/4-2/guide/profile-manager enabled enables disables enter required filter match delivery select method delivered startactivity startservice > note scanning applications user decode *current* activity necessarily displayed case marked ‘singletop’ androidmanifestxml file defined singletop copy disabled modification add characters beginning end transfer foreground disabling prevents actual transmitted strings present default hex hexadecimal format tab key append character processed return related intent's retrieved intentgetstringtextra intentgetserializableextra calls string tags `commotorolasolutionsemdkdatawedgelabel_type` label type `commotorolasolutionsemdkdatawedgedata_string` concatenated codes single tracks `commotorolasolutionsemdkdatawedgedecode_data` returned list byte arrays cases array symbologies support concatenation codabar code128 micropdf decoded stored clients passing index `commotorolasolutionsemdkdatawedgemsr_data` start/end sentinels track separators included configured `commotorolasolutionsemdkdatawedgemsr_track1` `commotorolasolutionsemdkdatawedgemsr_track2` `commotorolasolutionsemdkdatawedgemsr_track3` `commotorolasolutionsemdkdatawedgemsr_track1_status` status integer successful `commotorolasolutionsemdkdatawedgemsr_track2_status` `commotorolasolutionsemdkdatawedgemsr_track3_status` `commotorolasolutionsemdkdatawedgemsr_track1_encrypted` encrypted `commotorolasolutionsemdkdatawedgemsr_track2_encrypted` `commotorolasolutionsemdkdatawedgemsr_track3_encrypted` `commotorolasolutionsemdkdatawedgemsr_track1_hashed` hashed `commotorolasolutionsemdkdatawedgemsr_track2_hashed` `commotorolasolutionsemdkdatawedgemsr_track3_hashed` ","summary":"\nOverview\nIn order to get Barcode or MSR data in your application, you must create a profile that has both an Input feature and an Output feature:\n\nBarcode / MSR (Input)\nKeystroke,Intent,IP (Output)\n\nThe Barcode feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera.","url":"/mdmtk/2-0/mx/data-capture/intent"},{"title":"KeyStroke Profile Feature Reference","keywords":"## overview order barcode msr data application create profile input feature output * [barcode]/emdk-for-android/4-2/guide/profiles/profilebarcode / [msr]/emdk-for-android/4-2/guide/profiles/profilemsr [keystroke]/emdk-for-android/4-2/guide/profiles/profilekeystroke[intent]/emdk-for-android/4-2/guide/profiles/profileintent[ip]/emdk-for-android/4-2/guide/profiles/profileip `barcode` manager responsible reading device's integrated bar code scanner supports types readers including laser imager internal camera detailed parameters behavior individual symbology `intent` `keystroke` `ip` define handled intent collects sends received android mechanism familiar register receive intents handling passed ability configure keystroke emulating keystrokes option control prefix suffix automatically added basic formatting ip datawedge send captured host computer network connection address port tcp udp transport protocols field emdk identify parameter set manage part programmatically [profilemanager]/emdk-for-android/4-2/api/profilemanager api multiple update [emdk profiles overview]/emdk-for-android/4-2/guide/profile-manager information enabled enables disables action key character decoding special characters embedded disabled default tab \\t processed line feed carriage return configuration modification add beginning end transfer foreground disabling prevents actual transmitted strings present hex hexadecimal format append enter ","summary":"\nOverview\nIn order to get Barcode or MSR data in your application, you must create a profile that has both an Input feature and an Output feature:\n\nBarcode / MSR (Input)\nKeystroke,Intent,IP (Output)\n\nThe Barcode feature in the Profile Manager is responsible for reading data from the device's integrated bar code scanner and supports different types of bar code readers including laser, imager and internal camera.","url":"/mdmtk/2-0/mx/data-capture/keystroke"},{"title":"MSR Profile Feature Reference","keywords":"## overview order magstripe msr data application create profile features selected * [keystroke]/emdk-for-android/4-2/guide/profiles/profilekeystroke[intent]/emdk-for-android/4-2/guide/profiles/profileintent[ip]/emdk-for-android/4-2/guide/profiles/profileip output `msr` feature manager responsible reading device's integrated mag-stripe reader exists `intent` `keystroke` `ip` define barcode scanner handled intent collects sends received android mechanism familiar register receive intents handling passed ability configure keystroke emulating keystrokes option control prefix suffix automatically added basic formatting ip datawedge send captured host computer network connection address port tcp udp transport protocols settings reference field emdk identify parameter set manage part programmatically [profilemanager]/emdk-for-android/4-2/api/profilemanager api multiple types update [emdk profiles overview]/emdk-for-android/4-2/guide/profile-manager information enabled enables disables default disabled refer documentation [intent]/emdk-for-android/4-2/guide/profiles/profileintent [keystroke]/emdk-for-android/4-2/guide/profiles/profilekeystroke [ip]/emdk-for-android/4-2/guide/profiles/profileip ","summary":"\nOverview\nIn order to get MagStripe (MSR) data in your application, you must create a profile with two profile features selected:\n\nMSR\nKeystroke,Intent,IP (Output)\n\nThe MSR feature in the Profile Manager is responsible for reading data from the device's integrated mag-stripe reader (if one such exists).","url":"/mdmtk/2-0/mx/data-capture/msr"},{"title":"How to Check a Device's MX Version","keywords":"## overview version mx device factor determining settings supported ways determine installed * manually ui application code runtime emdk submitting xml csp adb zebra android kitkat visually > note 44+ versions devices open `settings` list applications [img]/mx/mx-version-on-device/settingsjpg select `about phone` [img]/mx/mx-version-on-device/aboutphonejpg `sw components` [img]/mx/mx-version-on-device/softwarejpg inspect `osx` item [img]/mx/mx-version-on-device/osxjpg `442` [img]/mx/mx-version-on-device/osx-highlightedjpg run time `versionmanager` api java // instance versionmanager = emdkmanagergetinstanceemdkmanagerfeature_typeversion getversion method passing version_typemx enum mxversion versionmanagergetversionversion_typemx system administrators mdms submit `mx` result returned information `mxmfversion` parm obtained `adb shell command` $ getprop output filtered `grep` considered `rebranded` technologies `rosymbolosxversion` | grep rosymbolosxversion [rosymbolosxversion] [qc_osx_44-3] `44` hypen patch release applied legacy motorola solutions branded `romotoslnenterpriseversion` romotoslnenterpriseversion [romotoslnenterpriseversion] [mx_ti4aj11_351-1] `11` ","summary":"\nOverview\n\nThe version of MX on a device is a factor in determining if certain settings will be supported. There are a few ways that you can determine the version that is installed:\n\nManually using the Settings UI\nFrom application code at runtime using the EMDK\nSubmitting XML using the MX CSP\nUsing ADB\n\n Using the Settings UI \n\nThe version of MX on a Zebra Android KitKat device you can visually look in the Settings UI to determine the MX version installed:\n\n Note: This is only available on KitKat 4.4+ or later versions of Zebra Android devices.","url":"/mdmtk/2-0/mx/mx-version-on-device"},{"title":"MX Management System Overview","keywords":"## overview mx management system mxms common interface zebra android device capabilities utilizing xml conforms standard oma-cp prov microsoft msprov schema developers administrators extensible efficient reliable scalable means configuring administrating devices exposes underlying csps provide give user access privileged unprivileged apis definitions terms ### board support package bsp method teams deliver operating ships specific version pre-installed suitable model reported build number updated generally downloading newer older website applying os update process open source project aosp google release distribute code royalty-free community oems free modify extend needed subject licensing requirements includes derived directly indirectly bsps include modifications and/or enhancements additional customers mobility extensions umbrella term refer collectively entire experience offered represents offers provided including * core osx value-add features multi-user whitelisting framework mxmf configuration service providers applications settings ui browser email client >**note** components present specifically absent installed included versioned primary determine general rule changed loading subsystem set query subsystems implement functions host built-into added shipped patch applied communicate interchange xmls conform **xmldtd** document **mx mf dtd** provider csp module implements ability clock wi-fi supported exposed defined dsd plug-in ship part downloaded registered calls point time kinds certmgr pre-registered thought collection submit bit accurate entity architecture data flow [img]architecture-overviewpng [img]architecture-bsppng effected updates emdk runtime introduced pre-existing behavior found remove change noted ","summary":"\nOverview\n\nThe MX Management System (MXMS) provides a common interface to Zebra Android device capabilities utilizing XML that conforms to the standard OMA-CP PROV (Microsoft MSPROV) schema.","url":"/mdmtk/2-0/mx/overview"},{"title":"How to Check a Device's MX Version","keywords":"## overview version mx device factor determining settings supported ways determine installed * manually ui application code runtime emdk submitting xml csp adb zebra android kitkat visually > note 44+ versions devices open `settings` list applications [img]/mx/mx-version-on-device/settingsjpg select `about phone` [img]/mx/mx-version-on-device/aboutphonejpg `sw components` [img]/mx/mx-version-on-device/softwarejpg inspect `osx` item [img]/mx/mx-version-on-device/osxjpg `442` [img]/mx/mx-version-on-device/osx-highlightedjpg apis run time `versionmanager` api java // instance versionmanager = emdkmanagergetinstanceemdkmanagerfeature_typeversion getversion method passing version_typemx enum mxversion versionmanagergetversionversion_typemx obtained `adb shell command` $ getprop output filtered `grep` considered `rebranded` technologies `rosymbolosxversion` | grep rosymbolosxversion [rosymbolosxversion] [qc_osx_44-3] `44` hypen patch release applied legacy motorola solutions branded `romotoslnenterpriseversion` romotoslnenterpriseversion [romotoslnenterpriseversion] [mx_ti4aj11_351-1] `11` ","summary":"\nOverview\n\nThe version of MX on a device is a factor in determining if certain settings will be supported. There are a few ways that you can determine the version that is installed:\n\nManually using the Settings UI\nFrom application code at runtime using the EMDK\nSubmitting XML using the MX CSP\nUsing ADB\n\n Using the Settings UI \n\nThe version of MX on a Zebra Android KitKat device you can visually look in the Settings UI to determine the MX version installed:\n\n Note: This is only available on KitKat 4.4+ or later versions of Zebra Android devices.","url":"/mdmtk/2-0/mx/version-on-device"},{"title":"SimpleMdmToolkitSample Test App","keywords":"##overview simplemdmtoolkitsample test app submit request xml documents mxms set feature device perform action classes project copied methods reused bind shown sample code [quick start page]/tutorial/ ##sample location found `[mdm install folder]\\samples\\simplemdmtoolkitsample` folder ##instructions import ide create file document place inside app's assets open mainactivity class located `comsymbolsimplemdmtoolkitsample` package edit inxml string variable utilizemxms method match created step java xmlname = testsetinxml ability parm values programatically added shows clock type xmlnamestartswithclock { // replace input arraylist replacevalues replacevaluesaddnew parmvalueclocktime111111 replacexml xmlparserreplaceparmsinxmlreplacevalues null logitagreplacexml +replacexml } additional files needed appmgr application apk put proper run program zebra android connected computer usb cable adb enabled result returned output logcat log messages show equivalent errors actions performed successfully indicating requested ","summary":"\nOverview\n\nThe SimpleMdmToolkitSample test app can be used to submit Request XML Documents to the MXMS to set a feature on the device or to perform an action.","url":"/mdmtk/2-0/samples"},{"title":"Quick Start","keywords":"## overview quick start guide walk common tasks components order mdm client interface mx management system zebra android devices steps covered * **intro mxms** basic information needed **binding communications mxms occur binding **generating xml** data exchanged handled defined xml structure **submitting submitted apply settings simple api requirements toolkit stagenow device note instructions install update started documentation java jvm installed ide intro ### capabilities utilizing conforms standard oma-cp prov microsoft msprov schema developers administrators extensible efficient reliable scalable means configuring administrating exposes underlying csps provide give user access privileged unprivileged apis csp dsd files included generate running change configuration behavior definitions terms architecture flow implementation approaches summaries [this page]/mx/overview utilizes dtd specifically microsoft-defined dialect oma cp open mobile alliance provisioning consumed familiar vendors and/or easily leveraged existing mdms based leverage elements request result documents dsds page]/guide/xml/xml_overview creation structured standardized format sample typically require values changed dynamically application manipulate specific parameter attributes code template generated parsing submitting document knowing happened minimal parm extraction method simplifying relevant involves searching extracting page]/guide/xml/response create project empty activity permissions added application's manifest file packages package named `comsymbolmxmf` `commotorolasolutionsemdkmxframework` holding aidl definition language studio created folder automatically simplemdmtoolkitsample supplied imxframeworkserviceaidl copied located simplemdmtoolkitsample's respective made step copy paste classes project's `comsymbolsimplemdmtoolkitsample` mxnamespacejava mxnamespacemotorolasolutionsjava mxnamespacesymboljava symbolbrandjava xmlparserjava >**note** names edited match `oncreate` call init symbolbrand class check detected bound allowing interaction // variable hold main static private m_activity @override protected void oncreatebundle savedinstancestate { superoncreatesavedinstancestate setcontentviewrlayoutactivity_main save accessed threads = process early shown oncreate complete symbolbrandmxmsinitthismmxframeworkserviceconnection } serviceconnection `onserviceconnected` callback notify successfully `onservicedisconnected` unbound mandatory track mmxframeworkserviceconnection completed public onserviceconnectedcomponentname classnameibinder service unbinding occurred onservicedisconnectedcomponentname classname `onserviceconnected method` helper called end term unbind exit point pass notification symbolbrandmxmsonserviceconnectedclassnameservice symbolbrandmxmstermm_activitymmxframeworkserviceconnection m_activityfinish symbolbrandmxmsonservicedisconnectedclassname generating ###creating required exchange **export profile mdm** feature full setup usage found activity's add `term` submit adds `utilizemxms` show edit repeatedly locations location possibly purposes test time real world situation things identified utilizemxms demonstrate assets send returned parms methods mentioned performs actions `isready` ready accept returns true clockinxml retrieved replace arraylist parmvalue objects object xmlparser instantiated top level characteristic type clock original xmlparser's `replaceparms` parm's modified class's `submitxml` return `formatxml` split multiple lines readability `isequivalent` equivalent device's set error setting shows `fetchparm` retrieve fetched function previous passed depending hurts symbolbrandmxmsisready logdm_activitygetapplicationinfonamemxmsisready string xmlname extract snippet inxml xmlparsergetassetxmlm_activityxmlname obtained null logim_activitygetapplicationinfonameinxml +inxml xmlnamestartswithclock input replacevalues replacevaluesaddnew parmvalueclocktime111111 replacexml xmlparserreplaceparmsinxmlreplacevalues logim_activitygetapplicationinfonamereplacexml +replacexml processing fail indicating outxml symbolbrandmxmssubmitxmlinxml back logim_activitygetapplicationinfonameoutxml +outxml friendlier display fmtoutxml xmlparserformatxmloutxml formatted invalid results formatting logim_activitygetapplicationinfonamefmtoutxml +fmtoutxml determine xmlparserisequivalentinxmloutxml logim_activitygetapplicationinfonamesubmitted xmlnamestartswithclockin fetch output xmlparserfetchparmoutxmlnew parmselectorclocktime non-null logim_activitygetapplicationinfonameset \\+time+\\ fmtinxml xmlparserformatxmlinxml logem_activitygetapplicationinfonameinxml +fmtinxml logem_activitygetapplicationinfonamefmtoutxml logem_activitygetapplicationinfonamesubmitted top-level errors int xmlparsercounttlcerrorsoutxml > logem_activitygetapplicationinfonameresult +errors+ logdm_activitygetapplicationinfonameno ","summary":"\nOverview\nThis quick start guide will walk through the common tasks and components that you will use in order for your MDM client to interface with the MX Management System available on Zebra Android devices.","url":"/mdmtk/2-0/tutorial"}]